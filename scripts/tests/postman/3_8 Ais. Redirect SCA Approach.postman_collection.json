{
  "info": {
    "_postman_id": "5c17e6d3-ea0f-490b-9f2c-1319ab28a0e9",
    "name": "3_8 Ais. Redirect SCA Approach",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Implicit",
      "item": [
        {
          "name": "1. Creates AIS consent",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
                "exec": [
                  "pm.globals.unset(\"consent_id\");",
                  "pm.globals.unset(\"redirect_id\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Consent status is received\", () => {",
                  "    pm.expect(jsonData.consentStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.globals.set(\"consent_id\", jsonData.consentId);",
                  "",
                  "const _links = jsonData._links;",
                  "",
                  "pm.test(\"SCA redirect link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    ",
                  "    pm.expect(_links).to.have.property('scaRedirect');",
                  "});",
                  "",
                  "const scaRedirectParts = jsonData._links.scaRedirect.split('/');",
                  "const redirectId = scaRedirectParts.pop() || scaRedirectParts.pop();",
                  "pm.globals.set(\"redirect_id\", redirectId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "date",
                "value": "Sun, 11 Aug 2019 15:02:37 GMT"
              },
              {
                "key": "tpp-qwac-certificate",
                "value": "qwac certificate"
              },
              {
                "key": "x-request-id",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "type": "text",
                "value": "true"
              },
              {
                "key": "TPP-Redirect-URI",
                "type": "text",
                "value": "TPP-Redirect-URI"
              },
              {
                "key": "TPP-Nok-Redirect-URI",
                "type": "text",
                "value": "TPP-Nok-Redirect-URI"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"9999-12-31\"\n    }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents"
              ]
            },
            "description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
          },
          "response": []
        },
        {
          "name": "2. Get consent response object by redirect id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f5bf291c-591b-452c-9609-537cd0cb7050",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Authorisation id is present\", () => {",
                  "    pm.expect(jsonData).to.have.property(\"authorisationId\");",
                  "});",
                  "",
                  "const authorisationId = jsonData.authorisationId;",
                  "pm.test(\"Authorisation id is correct\", () => {",
                  "    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
                  "});",
                  "",
                  "pm.test(\"Consent id is present\", () => {",
                  "    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
                  "});",
                  "",
                  "pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
                  "pm.globals.set(\"authorisation_id\", authorisationId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "76336274-4edd-4754-be5d-a1367287a5ea",
                "exec": [
                  "pm.globals.unset(\"internal_consent_id\");",
                  "pm.globals.unset(\"authorisation_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_cms}}"
              ],
              "path": [
                "psu-api",
                "v1",
                "ais",
                "consent",
                "redirect",
                "{{redirect_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Update PSU Data in consent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5617cad6-99fb-4e1f-bbb7-07a468117230",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
            },
            "url": {
              "raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_cms}}"
              ],
              "path": [
                "psu-api",
                "v1",
                "ais",
                "consent",
                "{{internal_consent_id}}",
                "authorisation",
                "{{authorisation_id}}",
                "psu-data"
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Update a status of AIS consent authorisation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afa1ac8d-f175-488d-861b-9658daa25d0c",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_cms}}"
              ],
              "path": [
                "psu-api",
                "v1",
                "ais",
                "consent",
                "{{internal_consent_id}}",
                "authorisation",
                "{{authorisation_id}}",
                "status",
                "FINALISED"
              ]
            }
          },
          "response": []
        },
        {
          "name": "5. Confirm AIS consent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cdb2bc7-e7a4-463d-b867-d67addf82fc1",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_cms}}"
              ],
              "path": [
                "psu-api",
                "v1",
                "ais",
                "consent",
                "{{internal_consent_id}}",
                "confirm-consent"
              ]
            }
          },
          "response": []
        },
        {
          "name": "6. Get AIS consent object from CMS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d668fb5-d960-40ed-ab62-986a9bb3ffdc",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Consent status is VALID\", () => {",
                  "    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_cms}}"
              ],
              "path": [
                "psu-api",
                "v1",
                "ais",
                "consent",
                "{{internal_consent_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "7. Get Consent from XS2A",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Result validator\", () => {",
                  "      pm.expect(jsonData).to.have.property('access');",
                  "       pm.expect(jsonData).to.have.property('recurringIndicator');",
                  "       pm.expect(jsonData).to.have.property('validUntil');",
                  "       pm.expect(jsonData).to.have.property('frequencyPerDay');",
                  "       pm.expect(jsonData).to.have.property('lastActionDate');",
                  "       pm.expect(jsonData).to.have.property('consentStatus');",
                  "     ",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}"
              ]
            },
            "description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
          },
          "response": []
        },
        {
          "name": "7. Read Account List",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1239cbb2-da61-4e7f-81a2-d848f86d6c58",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.globals.set(\"account_id\", jsonData.accounts[0].resourceId);",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Data exists\", () => {",
                  "    if (jsonData.accounts.length > 0) {",
                  "        const firstAccount = jsonData.accounts[0];",
                  "        ",
                  "        pm.expect(firstAccount).to.have.property('_links');",
                  "        pm.expect(firstAccount._links).to.have.property('balances');",
                  "        pm.expect(firstAccount._links).to.have.property('transactions');",
                  "        pm.expect(firstAccount).to.have.property('resourceId');",
                  "        ",
                  "        if (pm.globals.get(\"with_balance\") === \"true\") {",
                  "            pm.expect(firstAccount).to.have.property('balances');",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3745092a-a8c1-4018-9519-9cd65359e8fe",
                "exec": [
                  "pm.globals.unset(\"account_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Consent-ID",
                "value": "{{consent_id}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "accounts"
              ],
              "query": [
                {
                  "key": "withBalance",
                  "value": "{{with_balance}}"
                }
              ]
            },
            "description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
          },
          "response": []
        },
        {
          "name": "8. Read Balance List",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa7bf837-9bf3-46c2-9e9e-57f3f5d17d73",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Data exists\", () => {",
                  "    if (!(jsonData === null || jsonData.length === 0)) {",
                  "        pm.expect(jsonData).to.have.property('account');",
                  "        ",
                  "        if (pm.globals.get(\"with_balance\") === \"true\") {",
                  "            pm.expect(jsonData).to.have.property('balances');",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Consent-ID",
                "value": "{{consent_id}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "accounts",
                "{{account_id}}",
                "balances"
              ]
            },
            "description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
          },
          "response": []
        },
        {
          "name": "9. Read Transaction List",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "985b137b-f19c-4855-9b95-6223c94f5134",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Data exists\", () => {",
                  "    if (!(jsonData === null || jsonData.length === 0)) {",
                  "        pm.expect(jsonData).to.have.property('account');",
                  "        ",
                  "        if (jsonData.transactions !== undefined) {",
                  "            const bookingStatus = pm.globals.get(\"booking_status\");",
                  "            ",
                  "            if (bookingStatus === 'booked') {",
                  "                if (jsonData.transactions.pending !== undefined) {",
                  "                    pm.expect().fail();",
                  "                } ",
                  "            }",
                  "            ",
                  "            if (bookingStatus === 'pending') {",
                  "                if (jsonData.transactions.booked !== undefined) {",
                  "                    pm.expect().fail();",
                  "                } ",
                  "            }",
                  "        }",
                  "        ",
                  "        if (pm.globals.get(\"with_balance\") === \"true\") {",
                  "            pm.expect(jsonData).to.have.property('balances');",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9f33f550-7718-40a7-baca-d060e7b6e992",
                "exec": [
                  "pm.globals.unset(\"resource_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json, application/xml"
              },
              {
                "key": "Consent-ID",
                "value": "{{consent_id}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=2020-12-31&withBalance={{with_balance}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "accounts",
                "{{account_id}}",
                "transactions"
              ],
              "query": [
                {
                  "key": "bookingStatus",
                  "value": "{{booking_status}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2018-01-01"
                },
                {
                  "key": "dateTo",
                  "value": "2020-12-31"
                },
                {
                  "key": "withBalance",
                  "value": "{{with_balance}}"
                }
              ]
            },
            "description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
          },
          "response": []
        }
      ]
    }
  ]
}
